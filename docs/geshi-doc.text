# GeSHi Documentation {#top}

<div id="header" markdown="1">
Version <version />

<img align="right" src="http://qbnz.com/highlighter/images/geshi.png" />
Authors:
:   &copy; 2004 - 2007 [Nigel McNie][]
:   &copy; 2007 - 2008 [Benny Baumann][]
:   &copy; 2008 [Milian Wolff][]

GeSHi Website:
:   <http://qbnz.com/highlighter>
</div>

This is the documentation for GeSHi - Generic Syntax Highlighter.

The most modern version of this document is available on the web -
go to <http://qbnz.com/highlighter/documentation.php> to view it.

Any comments, questions, confusing points? Please [get in contact](#feedback) with the developers! We
need all the information we can get to make the use of GeSHi and everything related to it (including this documentation)
a breeze.

## Contents {#contents}

<toc />

## Introduction {#introduction}

GeSHi is exactly what the acronym stands for: a **Generic Syntax Highlighter**. As long
as you have a language file for almost any computer language - whether it be a
scripting language, object orientated, markup or anything in between - GeSHi can
highlight it! GeSHi is extremely customisable - the same source can be highlighted
multiple times in multiple ways - the same source even with a different language.
GeSHi outputs XHTML strict compliant code[^xhtml-strict], and can
make use of CSS to save on the amount of output. And what is the cost for all of this? You need
[PHP][]. That's all!

[^xhtml-strict]: The PRE header (see [The Code Container](#the-code-container)) is not valid HTML, you might want
to use one of the other header types instead.

### Features {#features}

Here are some of the standout features of GeSHi:

Programmed in PHP:
:   GeSHi is coded entirely in PHP. This means that where ever you have PHP, you
    can have GeSHi! Almost any free webhost supports PHP, and GeSHi works fine with PHP > 4.3.0[^php-version-note].

Support for many languages:
:   GeSHi comes with more than _100_ languages, including PHP, HTML, CSS, Java, C, Lisp, XML, Perl, Python,
    ASM and many more!

XHTML compliant output:
:   GeSHi produces XHTML compliant output, using stylesheets, so you need not worry about
	GeSHi ruining your claims to perfection in the standards department ;)

Highly customisable:
:   GeSHi allows you to change the style of the output on the fly, use CSS classes or not, use an external
	stylesheet or not, use line numbering, change the case of output keywords... the list goes on and on!

Flexible:
:   Unfortunately, GeSHi is quite load/time intensive for large blocks of code. However, you want speed?
	Turn off any features you don't like, pre-make a stylesheet and use CSS classes to reduce the amount of output and more -
	it's easy to strike a balance that suits you.

This is just a taste of what you get with GeSHi - the best syntax highlighter for the web in the world!

[^php-version-note]: Support is granted for PHP 4.3.0 and above, but especially 4.3.x cannot be guaranteed to
work due to a lack of test systems. If you are forced to use such old PHP versions complain at your hoster or
contact us if you find compatibility issues so we can try to resolve them. It's only PHP 4.4.X and above that
is verified to work.

### About GeSHi {#about-geshi}

GeSHi started as a mod for the [phpBB][] forum system, to enable highlighting of more
languages than the available (which can be roughly estimated to exactly 0 ;)). However, it quickly spawned into an
entire project on its own. But now it has been released, work continues on a mod
for phpBB[^phpbb-note] - and hopefully for many forum systems, blogs and other web-based systems.

[^phpbb-note]: I am no longer working on this MOD, however if someone else wants to they can contact me for more
information.

Several systems are using GeSHi now, including:

* [Dokuwiki][] - An advanced wiki engine
* [gtk.php.net][] - Their manual uses GeSHi for syntax highlighting
* [WordPress][] - A powerful blogging system[^plugin-only]
* [PHP-Fusion][] - A constantly evolving CMS
* [SQL Manager][] - A Postgres DBAL
* [Mambo][] - A popular open source CMS
* [MediaWiki][] - A leader in Wikis[^plugin-only]
* [TikiWiki][] - A megapowerful Wiki/CMS
* [TikiPro][] - Another powerful Wiki based on Tikiwiki
* [WikkaWiki][] - An advanced Wiki/CMS
* [RWeb][] - A site-building tool

[^plugin-only]: Available as plugin only. In addition, some of the other entries mentioned
here may only have GeSHi available as a plugin.

GeSHi is the original work of [Nigel McNie][]. The project was later handed over to [Benny Baumann][].
Others have helped with aspects of GeSHi also, they're mentioned in the [`THANKS`](THANKS) file.

### Credits {#credits}

Many people have helped out with GeSHi, whether by creating language files, submitting bug
reports, suggesting new ideas or simply pointing out a new idea or something I'd missed. All
of these people have helped to build a better GeSHi, you can see them in the [`THANKS`](THANKS)
file.

Do you want your name on this list? Why not make a language file, or submit a valid bug? Or perhaps help me with an
added feature I can't get my head around, or suggest a new feature, or even port
GeSHi to anothe language? There's lots you can do to help out, and I need it all :)

### Feedback {#feedback}

I need your feedback! *ANY*thing you have to say is fine, whether it be a query,
congratulations, a bug report or complaint, I don't care! I want to make this software
the best it can be, and I need your help! You can contact me in the following ways:

- **E-mail:**  [Nigel McNie][], [Benny Baumann][] or better yet: use the [geshi-users][] mailinglist
- **Forums:**  [Sourceforge.net Forums][][geshi-forums]
- **IRC:** #geshi on [Freenode]

Remember, any help I am grateful for :)

##  The Basics {#the-basics}

In this section, you'll learn a bit about GeSHi, how it works and what it uses, how to install it and how to use
it to perform basic highlighting.

###  Getting GeSHi work {#getting-geshi}

If you're reading this and don't have GeSHi, that's a problem ;). So, how do you get your hands on it?

####  Requirements {#requirements}

GeSHi requires the following to be installable:

*   **[PHP][]**. It's untested with anything other below 4.4.X. I hope to extend this range soon. I see no reason why
    it won't work with any version of PHP above 4.3.0.
*   **Approximately 2 megabytes of space**. The actual script is small - around 150K - but most of the size comes
    from the large number of language files (over 100!). If you're pushed for space, make sure you don't upload to
    your server the `docs/` or `contrib/` directory, and you may want to leave out any language files that don't
    take your fancy either.

As you can see, the requirements are very small. If GeSHi does NOT work for you in a particular version of PHP, let
me know why and I'll fix it.

####  Downloading GeSHi {#downloading-geshi}

There are several ways to get a copy of GeSHi. The first and easiest way of all is
visiting <http://qbnz.com/highlighter/downloads.php> to obtain the latest version.
This is suitable especially when you plan on using GeSHi on an production website
or otherwise need a stable copy for flawless operation.

If you are somewhat more sophisticated or need a feature just recently implemented
you might consider getting GeSHi by downloading via SVN. There are multiple ways
for doing so and each one has its own advantages and disadvantages. Let's cover
the various locations in the SVN you might download from:

*   <https://geshi.svn.sourceforge.net/svnroot/geshi/tags/>:<br />
    This directory holds all previous releases of GeSHi each as a subdirectory. By downloading from here you can test your code with various old versions
    in case something has been broken recently.
*   <https://geshi.svn.sourceforge.net/svnroot/geshi/branches/RELEASE_1_0_X_STABLE/geshi-1.0.X/src/>:<br />
    This directory is the right place for you if you want to have reasonably current versions of GeSHi but need something that is stable. This directory
    is updated once in a while between updates whenever there's something new but which is already reasonably stable. This branch is used to form the
    actual release once the work is done.
*   <https://geshi.svn.sourceforge.net/svnroot/geshi/trunk/geshi-1.0.X/src/>:<br />
    This directory is the working directory where every new feature, patch or improvement is committed to. This directory is updated regularly, but is not
    guaranteed to be tested and stable at all times. With this version you'll always get the latest version of GeSHi out there, but beware of bugs! There
    will be loads of them here! So this is absolutely **not recommended** for productive use!

If you have choosen the right SVN directory for you do a quick
<bash>svn co $SVNPATH geshi</bash> where <bash>$SVNPATH</bash> is one of the above paths and your desired version of GeSHi will be
downloaded into an subdirectory called "geshi". If you got a version of GeSHi
you can go on installing as shown below.

####  Extracting GeSHi {#extracting-geshi}

Packages come in `.zip`, `.tar.gz` and `.tar.bz2` format, so there's no complaining about whether it's available for
you. *nix users probably want `.tar.gz` or `.tar.bz2` and windows users probably want `.zip`.
And those lucky to download it directly from SVN don't even need to bother extracting GeSHi.

To extract GeSHi in Linux (`.tar.gz`):

1.  Open a shell
2.  <bash>cd</bash> to the directory where the archive lies
3.  Type <bash>tar -xzvf [filename]</bash> where `[filename]` is the name of the archive (typically `GeSHi-1.X.X.tar.gz`)
4.  GeSHi will be extracted to its own directory

To extract GeSHi in Windows (`.zip`):

1.  Open Explorer
2.  Navigate to the directory where the archive lies
3.  Extract the archive. The method you use will depend on your configuration. Some people can right-click upon
    the archive and select "Extract" from there, others may have to drag the archive and drop it upon an extraction program.

To extract from `.zip` you'll need an unzipping program - <bash>unzip</bash> in Linux, or 7-Zip, WinZip, WinRAR or similar for Windows.

####  Installing GeSHi {#installing-geshi}

Installing GeSHi is a snap, even for those most new to PHP. There's no tricks involved. Honest!

GeSHi is nothing more than a PHP class with related language support files. Those of you familiar with PHP can then
guess how easy the installation will be: simply copy it into your include path somewhere. You can put it wherever you
like in this include path. I recommend that you put the language files in a subdirectory of your include path too -
perhaps the same subdirectory that geshi.php is in. **Remember this path** for later.

If you don't know what an include path is, don't worry. Simply copy GeSHi to your webserver. So for example, say your
site is at `http://mysite.com/myfolder`, you can copy GeSHi to your site so the directory structure is like this:

    http://mysite.com/myfolder/geshi/[language files]
    http://mysite.com/myfolder/geshi.php

Or you can put it in any subdirectory you like:

    http://mysite.com/myfolder/includes/geshi/[language files]
    http://mysite.com/myfolder/includes/geshi.php

<caution>
When using GeSHi on a live site, the only directory required is the `geshi/` subdirectory. Both `contrib/` and `docs/` are
worthless, and furthermore, as some people discovered, one of the files in contrib had a security hole (fixed as of 1.0.7.3).
I suggest you delete these directories from any live site they are on.
</caution>

###  Basic Usage {#basic-usage}

Use of GeSHi is very easy. Here's a simple example:

<blockphp>
//
// Include the GeSHi library
//
include_once 'geshi.php';

//
// Define some source to highlight, a language to use
// and the path to the language files
//

$source = '$foo = 45;
for ( $i = 1; $i
{
  echo "$foo\n";
  --$foo;
}';
$language = 'php';

//
// Create a GeSHi object
//

$geshi = new GeSHi($source, $language);

//
// And echo the result!
//
echo $geshi->parse_code();
</blockphp>

As you can see, there's only three really important lines:

<php>include_once('geshi.php')</php>

This line includes the GeSHi class for use

<php>$geshi = new GeSHi($source, $language);</php>

This line creates a new GeSHi object, holding the source and the language you want to use for highlighting.

<php>echo $geshi->parse_code();</php>

This line spits out the result :)

So as you can see, simple usage of GeSHi is really easy. Just create a new GeSHi object and get the code!

Since version 1.0.2, there is a function included with GeSHi called `geshi_highlight`. This behaves exactly as the php
function <php>highlight_string()</php> behaves - all you do is pass it the language you want to use to highlight and the
path to the language files as well as the source. Here are some examples:

<blockphp>
// Simply echo the highlighted code
geshi_highlight($source, 'php', $path);

// Get the code back, for use later
$code = geshi_highlight($source, 'java', $path, true);

// Check if there is an error with parsing this code

ob_start();
$result = geshi_highlight($source, 'perl', $path);
$code = ob_get_contents();

ob_end_clean();
if ( !$result )
{
    // There was an error with highlighting...
}
else
{
    // All OK :)
}
</blockphp>

However, these are really simple examples and doesn't even begin to cover all the advanced features of GeSHi.
If you want to learn more, continue on to section 3: Advanced Features.

##  Advanced Features {#advanced-features}

This section documents the advanced features of GeSHi - strict mode, using CSS classes, changing styles on the fly,
disabling highlighting of some things and more.

In this section there are many code snippets. For all of these, you should assume that the GeSHi library has been
included, and a GeSHi object has been created and is referenced by the variable <php>$geshi</php>. Normally, the
source, language and path used are arbitary.

### The Code Container {#the-code-container}

The **Code Container** has a fundamental effect on the layout of your code before you even begin to style. What is the
Code Container? It's the bit of markup that goes around your code to contain it. By default your code is surrounded
by a <html><pre></html>, but you can also specify a <html><div></html>.

The <html><pre></html> header is the default. If you're familiar with HTML you'll know that whitespace is rendered
"as is" by a <html><pre></html> element. The advantage for you is that if you use <html><pre></html> the whitespace
you use will appear pretty much exactly how it is in the source, and what's more GeSHi won't have to add a whole
lot of <html><br /></html>'s and non-breaking spaces (<html>&nbsp;</html>) to your code to indent it. This saves
you source code (and your valuable visitors waiting time and your bandwidth).

But if you don't like <html><pre></html> or it looks stupid in your browser no matter what styles you try to
apply to it or something similar, you might want to use a <html><div></html> instead. A <html><div></html> will
result in more source - GeSHi will have to insert whitespace markup - but in return you can wrap long lines of code
that would otherwise have your browser's horizontal scrollbar appear. Of course with <html><div></html> you can
*not* wrap lines if you please. The highlighter demo at the [GeSHi home page][][geshi-home] uses the <html><div></html>
approach for this reason.

At this stage there isn't an option to wrap the code in <html><code></html> tags (unless you use the function
`geshi_highlight`), partly because of the inconsistent and unexpected ways stuff in <html><code></html> tags is
highlighted. Besides, <html><code></html> is an inline element. But this may become an option in future versions.

As of GeSHi 1.0.7.2 there is a new header type, that specifies that the code should not be wrapped in anything at all.

Another requested addition has been made in GeSHi 1.0.7.20 to force GeSHi to create a block around the highlighted
source even if this wasn't necessary, thus styles that are applied to the output of GeSHi can directly influence
the code only even if headers and footers are present.

To change/set the header to use, you call the **<php>set_header_type()</php>** method. It has one required argument which
defines the container type. Available are:

<php>$geshi->set_header_type(GESHI_HEADER_DIV);</php>

:   Puts a <html><div></html> around both, code and linenumbers. Whitespace is converted to <html> &nbsp;</html>
    sequences (i.e. one whitespace and the html entity of a non-breaking whitespace) to keep your indendation level
    in tact. Tabs are converted as well and you can manually [define the tab-width][]. Lines are automatically wrapped.
    Linenumbers are created using an ordered list.

<php>$geshi->set_header_type(GESHI_HEADER_PRE);</php>

:   Wraps code and linenumbers in a <html><pre></html> container. This way whitespace is kept as-is and thus
    this header produces less overhead then the `GESHI_HEADER_DIV` header type. Since linenumbers are still
    created using an ordered list this header type produces **invalid HTML**.

<php>$geshi->set_header_type(GESHI_HEADER_PRE_VALID);</php>
:  <small>_Available since 1.0.8_</small>

:   When linenumbers are disabled, this behaves just like `GESHI_HEADER_PRE`. In the other case though, a
    <html><div></html> is used to wrap the code and linenumbers and the <html><pre></html> is put inside the list
    items (<html><li></html>). This means slightly larger HTML output compared to `GESHI_HEADER_PRE`, but the
    output is **valid HTML**.

<php>$geshi->set_header_type(GESHI_HEADER_PRE_TABLE);</php>
:  <small>_Available since 1.0.8_</small>

:   Once again a <html><div></html> tag wraps the output. This time though no ordered list is used to create an ordered list,
    but instead we use a table with two cells in a single row. The left cell contains a <html><pre></html> tag which holds all
    linenumbers. The second cell holds the highlighted code, also wrapped in a <html><pre></html> tag, just like with
    `GESHI_HEADER_PRE`.

:   This produces **valid HTML** and works around the nasty selection behaviour of Firefox and other Gecko based
    browsers, see [SF#1651996][] for more information.

<php>$geshi->set_header_type(GESHI_HEADER_NONE);</php>
: <small>_Available since 1.0.7.2_</small>

:   No wrapper is added.

Those are the only arguments you should pass to <php>set_header_type</php>. Passing anything else may cause inconsistencies
in what is used as the Code Container (although it *should* simply use a <html><pre></html>). Better not to risk it.

<note>
  GESHI_HEADER_DIV, GESHI_HEADER_PRE, etc. are _constants_, so don't put them in strings!
</note>

<caution>
  The default styles for the <html><pre></html> and <html><div></html> _will be different_, especially if you use
  line numbers!

  I have found that a <html><pre></html> results in code that is smaller than for that of a <html><div></html>, you
  should rectify this difference by using **<php>set_overall_style()</php>** if you need to. But be aware of this
  difference for if you are changing the header type!
</caution>

###  Line Numbers {#line-numbers}

GeSHi has the ability to add line numbers to your code (see the demo available at <http://qbnz.com/highlighter/demo.php>
to see what can be achieved). Line numbers are a great way to make your code look professional, especially if you use the
fancy line numbers feature.

####  Enabling Line Numbers {#enabling-line-numbers}

To highlight a source with line numbers, you call the <php>enable_line_numbers()</php> method:

<php>$geshi->enable_line_numbers($flag);</php>
Where <php>$flag</php> is one of the following:

* `GESHI_NORMAL_LINE_NUMBERS` - Use normal line numbering
* `GESHI_FANCY_LINE_NUMBERS` - Use fancy line numbering
* `GESHI_NO_LINE_NUMBERS` - Disable line numbers (default)

Normal line numbers means you specify a style for them, and that style gets applied to all of them. Fancy line numbers
means that you can specify a different style for each n<sup>th</sup> line number. You change the value of n (default 5):

<php>$geshi->enable_line_numbers(GESHI_FANCY_LINE_NUMBERS, 37);</php>

The second parameter is not used in any other mode. Setting it to `0` is the same as simply using normal line numbers.
Setting it to `1` applies the fancy style to every line number.


<note>
  The values above are CONSTANTS - so don't put them in strings!
</note>

#### Styling Line Numbers {#styling-line-numbers}

As of GeSHi 1.0.2, line numbers are added by the use of ordered lists. This solves the old issues of line number
styles inheriting from styles meant for the code. Also, this solves an important issue about selecting code. For
example, line numbers look nice, but when you go to select the code in your browser to copy it? You got the line
numbers too! Not such a good thing, but thankfully this issue is now solved. What is the price? Unfortunately the
whole way that styles are inherited/used has changed for those of you who were familiar with 1.0.1, and there is
quite a bit more HTML involved. So think carefully about these things before you enable line numbers.

Now, onto how to style line numbers:

Styles are set for line numbers using the <php>set_line_style()</php> method:

<php>$geshi->set_line_style('background: #fcfcfc;');</php>

If you're using Fancy Line Numbers mode, you pass a second string for the style of the n<sup>th</sup> line number:

<php>$geshi->set_line_style('background: #fcfcfc;', 'background: #f0f0f0;');</php>

The second style will have no effect if you're not using Fancy Line Numbers mode.

By default, the styles you pass overwrite the current styles. Add a boolean "true" after the styles you specify to combine them with the current styles:

<blockphp>
$geshi->set_line_style('background: red;', true);

// or, for fancy line numbers
$geshi->set_line_style('background: red;', 'background: blue;', true);
</blockphp>

<note>
  Due to a bug with Firefox the issue that should have been fixed with 1.0.2 has reappeared in another form as Firefox
  includes extra text\markup into plaintext versions of webpage copies. This can sometimes be useful (actually it's
  used to get the plaintext version of this documentation), but more often is quite annoying. Best practice so far is
  to either not use line numbers, or offer the visitor of your page a plaintext version of your source. To learn more
  have a look at the [SF.net BugTracker Issue #1651996][SF#1651996]. This will hopefully be fixed in GeSHi version 1.2
  or as soon as Firefox provides webdevelopers with adequate ways to control this feature - whichever comes first!
</note>

<caution>
  When you set line number styles, the code will inherit those styles! This is the main issue to come out of the 1.0.2
  release. If you want your code to be styled in a predictable manner, you'll have to call the <php>set_code_style()</php>
  method to rectify this problem.

  Note also that you cannot apply background colours to line numbers unless you use <php>set_overall_style()</php>.
  Here's how you'd style:

  1. Use <php>set_overall_style()</php> to style the overall code block. For example, you can set the border
  style/colour, any margins and padding etc. using this method. **In addition:** set the background colour for
  all the line numbers using this method.

  2. Use <php>set_line_style()</php> to style the foreground of the line numbers. For example, you can set the colour,
  weight, font, padding etc. of the line numbers using this method.

  3. Use <php>set_code_style()</php> to explicitly override the styles you set for line numbers using
  <php>set_line_style</php>. For example, if you'd set the line numbers to be bold (or even if you'd only set
  the fancy line number style to be bold), and you didn't actually want your code to be bold, you'd make sure
  that <css>font-weight: normal;</css> was in the stylesheet rule you passed to <php>set_code_style()</php>.


  This is the one major change from GeSHi 1.0.1 - make sure you become familiar with this, and make sure that you check
  any code you have already styled with 1.0.1 when you upgrade to make sure nothing bad happens to it.
</caution>

#### Choosing a Start Number {#starting-line-numbers}

As of GeSHi 1.0.2, you can now make the line numbers start at any number, rather than just 1. This feature is useful
if you're highlighting code from a file from around a certain line number in that file, as an additional guide to
those who will view the code. You set the line numbers by calling the <php>start_line_numbers_at()</php> method:

<php>$geshi->start_line_numbers_at($number);</php>

<php>$number</php> must be a positive integer (or zero). If it is not, GeSHi will convert it anyway.

If you have not enabled line numbers, this will have no effect.


<caution>
  Although I'd like GeSHi to have XHTML strict compliance, this feature will break compliancy (however transitional
  compliancy remains). This is because the only widely supported way to change the start value for line numbers is
  by using the **start="number"** attribute of the <html><ol></html> tag. Although CSS does provide a mechanism for
  doing this, it is only supported in Opera versions 7.5 and above (not even Firefox supports this).
</caution>

### Using CSS Classes {#using-css-classes}

Using CSS to highlight your code instead of in-lining the styles is a definate bonus. Not only is it more compliant
(the w3c is deprecating the style attribute in XHTML 2.0) but it results in far less outputted code - up to a whopping
90% saving - which makes a \*huge\* difference to those unlucky of us on modems!

#### Enabling CSS Classes {#enabling-css-classes}

By default, GeSHi doesn't use the classes, so it's easy just to whack out some highlighted code if you need without
worrying about stylesheets. However, if you're a bit more organised about it, you should use the classes ;). To turn
the use of classes on, you call the <php>enable_classes()</php> method:

<php>$geshi->enable_classes();</php>
If you want to turn classes OFF for some reason later:

<php>$geshi->enable_classes(false);</php>
If classes are enabled when <php>parse_code()</php> is called, then the resultant source will use CSS classes in the
output, otherwise it will in-line the styles. The advantages of using classes are great - the reduction in source will
be very noticeable, and what's more you can use one stylesheet for several different highlights on the same page. In
fact, you can even use an external stylesheet and link to that, saving even more time and source (because stylesheets
are cached by browsers).

<note>
  There have been problems with inline styles and the Symbol Highlighting added in 1.0.7.21. If you can you should
  therefore turn CSS classes ON to avoid those issues.
</note>

<caution>
  This should be the very first method you call after creating a new GeSHi object! That way, various other methods
  can act upon your choice to use classes correctly. In theory, you could call this method just before parsing the
  code, but this may result in unexpected behaviour.
</div>

#### Setting the CSS class and ID {#setting-css-class-id}

You can set an overall CSS class and id for the code. This is a good feature that allows you to use the same
stylesheet for many different snippets of code. You call <php>set_overall_class()</php> and <php>set_overall_id</php>
to accomplish this:

<blockphp>
$geshi->set_overall_class('mycode');
$geshi->set_overall_id('dk48ck');
</blockphp>

The default classname is the name of the language being used. This means you can use just the one stylesheet for all
sources that use the same language, and incidentally means that you probably won't have to call these methods too often.

CSS IDs are supposed to be unique, and you should use them as such. Basically, you can specify an ID for your code
and then use that ID to highlight that code in a unique way. You'd do this for a block of code that you expressly
wanted to be highlighted in a different way (see the section below on gettting the stylesheet for your code for an example).

#### Getting the stylesheet for your code {#getting-stylesheet}

The other half of using CSS classes is getting the stylesheet for use with the classes. GeSHi makes it very easy to
get a stylesheet for your code, with one easy method call:

<blockphp>
$geshi->enable_classes();

// Here we have code that will spit out a header for
// a stylesheet. For example:

echo '<html>
<head><title>Code</title>
<style type="text/css">
<!--';
// Echo out the stylesheet for this code block
echo $geshi->get_stylesheet();

// And continue echoing the page

echo '-->
</style></head>
<body>';
</blockphp>

The <php>get_stylesheet()</php> method gets the stylesheet for your code in one easy call. All you need to do
is output it in the correct place. As you can also see, you don't even have to enable class usage to get the
stylesheet nessecary either - however not enabling classes but using the stylesheet may result in problems later.

By default, <php>get_stylesheet()</php> tries to echo the least amount of code possible. Although currently it doesn't
check to see if a certain lexic is even in the source, you can expect this feature in the future. At least for the
present however, if you explicitly disable the highlighting of a certain lexic, or disable line numbers, the related
CSS will not be outputted. This may be a bad thing for you perhaps you're going to use the stylesheet for many blocks
of code, some with line numbers, others with some lexic enabled where this source has it disabled. Or perhaps you're
building an external stylesheet and want all lexics included. So to get around this problem, you do this:

<php>$geshi->get_stylesheet(false);</php>

This turns economy mode off, and all of the stylesheet will be outputted regardless.

Now lets say you have several snippets of code, using the same language. In most of them you don't mind if they're
highlighted the same way (in fact, that's exactly what you want) but in one of them you'd like the source to be
highlighted differently. Here's how you can do that:

<blockphp>
// assume path is the default "geshi/" relative to the current directory

$geshi1 = new GeSHi($source1, $lang);
$geshi2 = new GeSHi($source2, $lang);

$geshi3 = new GeSHi($source3, $lang);

// Turn classes on for all sources
$geshi1->enable_classes();

$geshi2->enable_classes();
$geshi3->enable_classes();

// Make $geshi3 unique
$geshi3->set_overall_id('different');


//
// Methods are called on $geshi3 to change styles...
//

echo '<html>
<head><title>Code</title>

<style type="text/css">
<!--
';

// Get the nessecary stylesheets
echo $geshi1->get_stylesheet();

echo $geshi3->get_stylesheet();

echo '-->
</style></head>
<body>';


echo 'Code snippet 1:';
echo $geshi1->parse_code();
echo 'Code snippet 2 (same highlighting as 1):';

echo $geshi2->parse_code();
echo 'Code snippet 3 (DIFFERENT highlighting):';
echo $geshi3->parse_code();


echo '</body></html>';
</blockphp>

Before version 1.0.2, you needed to set the class of the code you wanted to be unique to the empty string. This
limitation has been removed in version 1.0.2 - if you set the ID of a block of code, all styling will be done based
on that ID alone.

#### Using an External Stylesheet {#using-an-external-stylesheet}

An external stylesheet can reduce even more the amount of code needed to highlight some source. However there are some
drawbacks with this. To use an external stylesheet, it's up to you to link it in to your document, normally with
the following HTML:

<blockhtml>
<html>
<head>
<link rel="stylesheet" type="text/css" href="url_to_stylesheet.css" />
</blockhtml>

In your external stylesheet you put CSS declarations for your code. Then just make sure you're using the correct class (use
<php>set_overall_class()</php> to ensure this) and this should work fine.

This method is great if you don't mind the source always being highlighted the same (in particular, if you're making a
plugin for a forum/wiki/other system, using an external stylesheet is a good idea!). It saves a small amount of code and
your bandwidth, and it's relatively easy to just change the stylesheet should you need to. However, using this will render
the methods that change the styles of the code useless, because of course the stylesheet is no longer being dynamically
generated. You can still disable highlighting of certain lexics dynamically, however.

<note>
  As of version 1.0.2, GeSHi comes with a `contrib/` directory, which in it contains a "wizard" script for creating
  a stylesheet. Although this script is by no means a complete solution, it will create the necessary rules for the
  basic lexics - comments, strings for example. Things not included in the wizard include regular expressions for any
  language that uses them (PHP and XML are two languages that use them), and keyword-link styles. However, this script
  should take some of the tedium out of the job of making an external stylesheet. Expect a much better version of this
  script in version 1.2!
</note>

### Changing Styles {#changing-styles}

One of the more powerful features of GeSHi is the ability to change the style of the output dynamically. Why be chained
to the boring styles the language authors make up? You can change almost every single aspect of highlighted code - and
can even say whether something is to be highlighted at all.

If you're confused about "styles", you probably want to have a quick tutorial in them so you know what you can do with
them. Checkout the homepage of CSS at <http://www.w3.org/Style/CSS>.

#### The Overall Styles {#the-overall-styles}

The code outputted by GeSHi is either in a <html><div></html> or a <html><pre></html> (see the section entitled "The
Code Container"), and this can be styled.

`$geshi->set_overall_style('... styles ...');`
Where styles is a string containing valid CSS declarations. By default, these styles overwrite the current styles, but you can change this by adding a second parameter:

`$geshi->set_overall_style('color: blue;', true);`
The default styles "shine through" wherever anything isn't highlighted. Also, you can apply more advanced styles, like position: (fixed|relative) etc, because a <html><div></html>/<html><pre></html> is a block level element.

<note>
  Remember that a <html><div></html> will by default have a larger font size than a <html><pre></html>, as discussed in the section ["The Code Container"](#the-code-container).
</note>

#### Line Number Styles {#line-number-styles}

You may wish to refer to the section [Styling Line Numbers][1] before reading this section.

As of version 1.0.2, the way line numbers are generated is different, so therefore the way that they are styled is
different. In particular, now you cannot set the background style of the fancy line numbers to be different from that
of the normal line numbers.

Line number styles are set by using the method <php>set_line_style</php>:

<php>$geshi->set_line_style($style1, $style2);</php>

<php>$style1</php> is the style of the line numbers by default, and <php>$style2</php> is the style of the fancy line numbers.

<caution>
  Things have changed since 1.0.1! This note is **very** important - please make sure you check this twice before
  complaining about line numbers!

  Because of the way that ordered lists are done in HTML, there really isn't normally a way to style the actual
  _numbers_ in the list. I've cheated somewhat with GeSHi - I've made it possible to use CSS to style the _foreground_ of
  the line numbers. So therefore, you can change the color, font size and type, and padding on them. If you want to
  have a pretty background, you **must** use <php>set_overall_style()</php> to do this, and use <php>set_code_style()</php>
  to style the actual code! This is explained in the section above: [Styling Line Numbers](#styling-line-numbers).

  In addition, the styles for fancy line numbers _is now the difference between the normal styles and the styles you want
  to achieve_. For example, in GeSHi prior to 1.0.2 you may have done this to style line numbers:

  <php>$geshi->set_line_style('color: red; font-weight: bold;', 'color: green; font-weight: bold');</php>

  Now you instead can do this:

  <php>$geshi->set_line_style('color: red; font-weight: bold;', 'color: green;');</php>

  The <css>font-weight: bold;</css> will automatically carry through to the fancy styles. This is actually a small
  saving in code - but the difference may be confusing for anyone using 1.0.1 at first.
</caution>

#### Setting Keyword Styles {#setting-keyword-styles}

Perhaps the most regular change you will make will be to the styles of a keyword set. In order to change the styles for
a particular set, you'll have to know what the set is called first. Sets are numbered from 1 up. Typically, set 1
contains keywords like `if`, `while`, `do`, `for`, `switch` etc, set 2 contains `null`, `false`, `true` etc, set 3
contains function inbuilt into the language (`echo`, `htmlspecialchars` etc. in PHP) and set 4 contains data types and
similar variable modifiers: `int`, `double`, `real`, `static` etc. However these things are not fixed, and you should
check the language file to see what key you want. Having a familiarity with a language file is definately a plus for
using it.

To change the styles for a keyword set, call the <php>set_keyword_group_style()</php> method:

<php>$geshi->set_keyword_group_style($group, $styles);</php>

Where <php>$group</php> is the group to change the styles for and <php>$styles</php> is a string containing the styles
to apply to that group.

By default, the styles you pass overwrite the current styles. Add a boolean **true** after the styles you specify to
combine them with the current styles:

<php>$geshi->set_keyword_group_style(3, 'color: white;', true);</php>

#### Setting Comment Styles {#setting-comment-styles}

To change the styles for a comment group, call the <php>set_comments_style()</php> method:

<php>$geshi->set_comments_style($group, $styles);</php>

Where <php>$group</php> is either a number corresponding to a single-line comment, or the string <php>'MULTI'</php> to
specify multiline comments:

<blockphp>
$geshi->set_comments_style(1, 'font-style: italic;');
$geshi->set_comments_style('MULTI', 'display: hidden;');
</blockphp>

By default, the styles you pass overwrite the current styles. Add a boolean <php>true</php> after the styles you specify to
combine them with the current styles:

<php>$geshi->set_comments_style(1, 'font-weight: 100;', true);</php>

<note>
  In 1.0.7.22 a new kind of Comments called "COMMENT_REGEXP" has been added. Those are handled by setting single
  line comment styles.
</note>

#### Setting Other Styles {#setting-other-styles}

GeSHi can highlight many other aspects of your source other than just keywords and comments. Strings, Numbers, Methods
and Brackets among other things can all also be highlighted. Here are the related methods:

<blockphp>
$geshi->set_escape_characters_style($styles[, $preserve_defaults]);
$geshi->set_symbols_style($styles[, $preserve_defaults]);

$geshi->set_strings_style($styles[, $preserve_defaults]);
$geshi->set_numbers_style($styles[, $preserve_defaults]);
$geshi->set_methods_style($key, $styles[, $preserve_defaults]);
$geshi->set_regexps_style($key, $styles[, $preserve_defaults]);
</blockphp>

<php>$styles</php> is a string containing valid stylesheet declarations, while <php>$preserve_defaults</php> should be set
to **true** if you want your styles to be merged with the previous styles. In the case of <php>set_methods_style()</php>,
you should select a group to set the styles of, check the language files for the number used for each "object splitter".

Like this was possible for <php>set_method_style</php> a new parameter has been introduced for
<php>set_symbols_style</php> too which allows you to select the group of symbols for which you'd like to change your
style. <php>$geshi->set_symbols_style($styles[, $preserve_defaults[, $group]]);</php> If the third parameter is not
given, group 0 is assumed. Furthermore you should note that any changes to group 0 are also reflected in the bracket
style, i.e. a pass-through call to <php>set_bracket_style</php> is made.

### Case Sensitivity and Auto Casing {#case-caps}

Controlling the case of the outputted source is an easy job with GeSHi. You can control which keywords are converted in
case, and also control whether keywords are checked in a case sensitive manner.

#### Auto-Caps/Nocaps {#auto-caps-nocaps}

Auto-Caps/Nocaps is a nifty little feature that capitalises or lowercases automatically certain lexics when they are
styled. I dabble in QuickBASIC, a dialect of BASIC which is well known for it's capatalisation, and SQL is another
language well known for using caps for readability.

To change what case lexics are rendered in, you call the <php>set_case_keywords()</php> method:

<php>$geshi->set_case_keywords($caps_modifier);</php>

The valid values to pass to this method are:

*   `GESHI_CAPS_NO_CHANGE` - Don't change the case of any lexics, leave as they are found
*   `GESHI_CAPS_UPPER` - Uppercase all lexics found
*   `GESHI_CAPS_LOWER` - Lowercase all lexics found

<caution>
  When I say "lexic", I mean "keywords". **Any** keyword in **any** keyword array will be modified using this option! This is one small area of inflexibility I hope to fix in 1.2.X.
</caution>

I suspect this will only be used to specify `GESHI_CAPS_NO_CHANGE` to turn off autocaps for languages like SQL and BASIC variants, like so:

`$geshi = new GeSHi($source, 'sql');
$geshi->set_case_keywords(GESHI_CAPS_NO_CHANGE); // don't want keywords capatalised `
All the same, it can be used for some interesting effects:

`$geshi = new GeSHi($source, 'java');
// Anyone who's used java knows how picky it is about CapitalLetters...
$geshi->set_case_keywords(GESHI_CAPS_LOWER);
// No *way* the source will look right now ;) `
 3.5.2: Setting Case Sensitivity {#setting-case-sensitivity}

Some languages, like PHP, don't mind what case function names and keywords are in, while others, like Java, depend on such pickiness to maintain their bad reputations ;). In any event, you can use the <php>set_case_sensitivity</php> to change the case sensitiveness of a particular keyword group from the default:

`$geshi->set_case_sensitivity($key, $sensitivity);`
Where <php>$key</php> is the key of the group for which you wish to change case sensitivness for (see the language file for that language), and <php>$sensitivity</php> is a boolean value - **true** if the keyword is case sensitive, and **false** if not.

 3.6: Changing the Source, Language, Config Options {#changing-config}

What happens if you want to change the source to be highlighted on the fly, or the language. Or if you want to specify any of those basic fields after you've created a GeSHi object? Well, that's where these methods come in.

 3.6.1: Changing the Source Code {#changing-the-source}

To change the source code, you call the <php>set_source()</php> method:

`$geshi->set_source($newsource);`
Example:

`$geshi = new GeSHi($source1, 'php');


// Method calls to specify various options...

$code1 = $geshi->parse_code();

$geshi->set_source($source2);

$code2 = $geshi->parse_code();`
 3.6.2: Changing the Language {#changing-the-language}

What happens if you want to change the language used for highlighting? Just call <php>set_language()</php>:

`$geshi->set_language('newlanguage');`
Example:

`$geshi = new GeSHi($source, 'php');


$code = $geshi->parse_code();

// Highlight GeSHi's output
$geshi->set_source($code);

$geshi->set_language('html4strict');
$geshi->enable_classes(false);
echo $geshi->parse_code();` <note>

  <p>
    Names are case-insensitive - they will be converted to lower case to match a language file however. So if you're making a language file, remember it should have a name in lower case.
  </p>
</div>

<note>

  <p>
    What you pass to this method is the name of a language file, minus the .php extension. If you're writing a plugin for a particular application, it's up to you to somehow convert user input into a valid language name.
  </p>
</div>

<note>

  <p>
    Since GeSHi 1.0.8 this function does not reset language settings for an already loaded language. If you want to highlight code in the same language with different settings add the optional $force_reset parameter:  <code>&lt;span style="color: #0000ff;">$geshi&lt;/span>-&gt;&lt;span style="color: #006600;">set_language&lt;/span>&lt;span style="color: #66cc66;">(&lt;/span>&lt;span style="color: #ff0000;">'language'&lt;/span>, &lt;span style="color: #000000; font-weight: bold; ">true&lt;/span>&lt;span style="color: #66cc66;">)&lt;/span>;</code>
  </p>
</div>

<caution>

  <p>
    GeSHi <php>include()</php>s the language file, so be careful to make sure that users can't pass some wierd language name to include any old script! GeSHi tries to strip non-valid characters out of a language name, but you should always do this your self anyway. In particular, language files are always lower-case, with either alphanumeric characters, dashes or underscores in their name.
  </p>

  <p>
    At the very least, strip "/" characters out of a language name.
  </p>
</div>

 3.6.3: Changing the Language Path {#changing-the-path}

What happens if all of a sudden you want to use language files from a different directory from the current language file location? You call the <php>set_language_path()</php> method:

`$geshi->set_language_path($newpath);`
It doesn't matter whether the path has a trailing slash after it or not - only that it points to a valid folder. If it doesn't, that's your tough luck ;)

 3.6.4: Changing the Character Set {#changing-the-charset}

<note>

  <p>
    As of GeSHi 1.0.7.18, you don't need to use this, as htmlspecialchars is not being used due to a security flaw in it (that is unpatched in even the most recent PHP4 versions, and in PHP5 < 5.2). As long as you set the encoding properly with a php <a href="http://php.net/header">header()</a> call, your foreign characters will be displayed correctly.
  </p>
</div>

As of version 1.0.3, you can use the method <php>set_encoding</php> to specify the character set that your source is in. Valid names are those names that are valid for the PHP function <html>htmlentities()</html>:

`$geshi->set_encoding($encoding);`
There is a table of valid strings for <php>$encoding</php> at the php.net manual linked to above. If you do not specify an encoding, or specify an invalid encoding, the character set used is ISO-8859-1.

 Using `load_from_file` to Change the Language and Source Code {#changing-using-load-from-file}

As of GeSHi 1.0.5, you can use the method <php>load_from_file</php> to load the source code and language from a file. Simply pass this method a file name and it will attempt to load the source and set the language.

`$geshi->load_from_file($file_name, $lookup);`
<php>$file_name</php> is the file name to use, and <php>$lookup</php> is an optional parameter that contains a lookup array to use for deciding which language to choose. You can use this to override GeSHi's default lookup array, which may not contain the extension of the file you're after, or perhaps does have your extension but under a different language. The lookup array is of the form:

<pre>array(
	 *   'lang_name' =&gt; array('extension', 'extension', ...),
	 *   'lang_name' ...
	 * );</pre>

Also, you can use the method <php>get_language_name_from_extension</php> if you need to convert a file extension to a valid language name. This method will return the empty string if it could not find a match in the lookup, and like <php>load_from_file</php> it accepts an optional second parameter that contains a lookup array.

 3.7: Error Handling {#error-handling}

What happens if you try to highlight using a language that doesn't exist? Or if GeSHi can't read a required file? The results you get may be confusing. You may check your code over and over, and never find anything wrong. GeSHi provides ways of finding out if GeSHi itself found anything wrong with what you tried to do. After highlighting, you can call the <php>error()</php> method:

`$geshi = new GeSHi('hi', 'thisLangIsNotSupported');`

`echo $geshi->error();&nbsp; // echoes error message`
The error message you will get will look like this:

> GeSHi Error: GeSHi could not find the language thisLangIsNotSupported (using path geshi/) (code 2)
The error outputted will be the last error GeSHi came across, just like how `mysql_error()` works.

 3.8: Disabling styling of some Lexics {#disabling-lexics}

One disadvantage of GeSHi is that for large source files using complex languages, it can be quite slow with every option turned on. Although future releases will concentrate on the speed/resource side of highlighting, for now you can gain speed increases by disabling some of the highlighting options. This is done by using a series of <php>set_*_highlighting</php> methods:

*   **<tt>set_keyword_group_highlighting(<php>$group</php>, <php>$flag</php>):</tt>** Sets whether a particular <php>$group</php> of keywords is to be highlighted or not. Consult the necessary language file(s) to see what <php>$group</php> should be for each group (typically a positive integer). <php>$flag</php> is **false** if you want to disable highlighting of this group, and **true** if you want to re-enable higlighting of this group. If you disable a keyword group then even if the keyword group has a related URL one will not be generated for that keyword.
*   **<tt>set_comments_highlighting(<php>$group</php>, <php>$flag</php>):</tt>** Sets whether a particular <php>$group</php> of comments is to be highlighted or not. Consult the necessary language file(s) to see what <php>$group</php> should be for each group (typically a positive integer, or the string 'MULTI' for multiline comments. <php>$flag</php> is **false** if you want to disable highlighting of this group, and **true** if you want to re-enable highlighting of this group.
*   **<tt>set_regexps_highlighting(<php>$regexp</php>, <php>$flag</php>):</tt>** Sets whether a particular <php>$regexp</php> is to be highlighted or not. Consult the necessary language file(s) to see what <php>$regexp</php> should be for each regexp (typically a positive integer, or the string 'MULTI' for multiline comments. <php>$flag</php> is **false** if you want to disable highlighting of this group, and **true** if you want to re-enable highlighting of this group.
*   The following methods:
    *   **<tt>set_escape_characters_highlighting(<php>$flag</php>)</tt>**
    *   **<tt>set_symbols_highlighting(<php>$flag</php>)</tt>**
    *   **<tt>set_strings_highlighting(<php>$flag</php>)</tt>**
    *   **<tt>set_numbers_highlighting(<php>$flag</php>)</tt>**
    *   **<tt>set_methods_highlighting(<php>$flag</php>)</tt>** Work on their respective lexics (e.g. set\_methods\_highlighting will disable/enable highlighting of methods). For each method, if
    <php>$flag</php> is **false** then the related lexics will not be highlighted at all (this means no HTML will surround the lexic like usual, saving on time and bandwidth.

In case all highlighting should be disabled or reenabled GeSHi provides two methods called <php>disable_highlighting()</php> and **<tt>enable_highlighting(<php>$flag</php>)</tt>**. The optional paramter <php>$flag</php> has been added in 1.0.7.21 and specifies the desired state, i.e. **true** (default) to turn all highlighting on, or **false** to turn all highlighting off. Since 1.0.7.21 the method <php>disnable_highlighting()</php> has become deprecated.

 3.9: Setting the Tab Width {#setting-tab-width}

If you're using the <html><pre></tt> header, tabs are handled automatically by your browser, and in general you can count on good results. However, if you're using the <tt><div></html> header, you may want to specify a tab width explicitly.

Note that tabs created in this fashion won't be like normal tabs - there won't be "tab-stops" as such, instead tabs will be replaced with the specified number of spaces.

To change the tab width, you call the <php>set_tab_width()</php> method:

`$geshi->set_tab_width($width);`
Where <php>$width</php> is the width in spaces that you'd like tabs to be.

 3.10: Using Strict Mode {#using-strict-mode}

Some languages like to get tricky, and jump in and out of the file that they're in. For example, the vast majority of you reading this will have used a PHP file. And you know that PHP code is only executed if it's within delimiters like `<?php` and `?>` (there are others of course...). So what happens if you do the following in a php file?

`<img src="<?php echo rand(1, 100) ?>" />`
Well normally using GeSHi with PHP, or using a bad highlighter, you'll end up with this:

`<img src="<?php echo rand(1, 100) ?>" />`
What a mess! Especially if you're being slack about where you're putting your quotes, you could end up with the rest of your file as bright red. Fortunately, you can tell GeSHi to be "strict" about just when it highlights and when it does not, using the <php>enable_strict_mode</php> method:

`$geshi->enable_strict_mode($mode);`
Where <php>$mode</php> is **true** or not specified to enable strict mode, or **false** to disable strict mode if you've already turned it and don't want it now.

Here's the result: much better!

`<img src="<?php echo rand(1, 100) ?>" />`
 3.11: Adding/Removing Keywords {#adding-removing-keywords}

Lets say that you're working on a large project, with many files, many classes and many functions. Perhaps also you have the source code on the web and highlighted by GeSHi, perhaps as a front end to CVS, as a learning tool, something to refer to, whatever. Well, why not highlight the names of the functions and classes \*your\* project uses, as well as the standard functions and classes? Or perhaps you're not interested in highlighting certain functions, and would like to remove them? Or maybe you don't mind if an entire function group goes west in the interest of speed? GeSHi can handle all of this!

 3.11.1: Adding a Keyword {#adding-a-keyword}

If you want to add a keyword to an existing keyword group, you use the <php>add_keyword</php> method:

`$geshi->add_keyword($key, $word);`
Where <php>$key</php> is the index of the group of keywords you want to add this keyword to, and <php>$word</php> is the word to add.

This implies knowledge of the language file to know the correct index.

<note>

  <p>
    Keywords should contain at least two alphabetical characters (lower or upper case letters only). This is to enable GeSHi to work much faster by not bothering to try to detect keywords in parts of your source where there is no alphabetical characters.
  </p>
</div>

 3.11.2: Removing a Keyword {#removing-a-keyword}

Perhaps you want to remove a keyword from an existing group. Maybe you don't use it and want to save yourself some time. Whatever the reason, you can remove it using the <php>remove_keyword</php> method:

`$geshi->remove_keyword($key, $word);`
Where <php>$key</php> is the index of the gropu of keywords that you want to remove this keyword from, and <php>$word</php> is the word to remove.

This implies knowledge of the language file to know the correct index - most of the time the keywords you'll want to remove will be in group 3, but this is not guaranteed and you should check the language file first.

This function is silent - if the keyword is not in the group you specified, nothing awful will happen ;)

